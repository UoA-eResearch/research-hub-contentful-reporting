service: content-graph-api
custom:
  bucketBaseName: serverless-shared-bucket
  ResearchHub: ${self:service}
  BusinessService: Faculty of Science
  Faculty: Science
  Department: Centre for eResearch
  ProjectCode: N/A
  WikiLink: N/A
  Application: ${self:service}
  CostCentre: N/A
  customDomain:
    domainName: ${file(env/${self:provider.stage}.json):awsApiGatewayCustomDomainName}
    basePath: ${self:service}-${self:provider.stage}
    stage: ${self:provider.stage}
provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'} # Deploy with sls deploy --stage STAGE (default dev)
  region: ap-southeast-2
  endpointType: regional
  deploymentBucket:
    name: ${self:custom.bucketBaseName}-${file(env/${self:provider.stage}.json):DEPLOYMENT_BUCKET_NAME}
  role: myLambdaRole
  tags:
    ResearchHub: ${self:custom.ResearchHub}
    BusinessService: ${self:custom.BusinessService}
    Department: ${self:custom.Department}
    ProjectCode: ${self:custom.ProjectCode}
    WikiLink: ${self:custom.WikiLink}
    Application: ${self:custom.Application}
    CostCentre: ${self:custom.CostCentre}
    Faculty: ${self:custom.Faculty}
  stackTags:
    ResearchHub: ${self:custom.ResearchHub}
    BusinessService: ${self:custom.BusinessService}
    Department: ${self:custom.Department}
    ProjectCode: ${self:custom.ProjectCode}
    WikiLink: ${self:custom.WikiLink}
    Application: ${self:custom.Application}
    CostCentre: ${self:custom.CostCentre}
    Faculty: ${self:custom.Faculty}
  environment:
    CONTENTFUL_SPACE_ID: ${file(env/${self:provider.stage}.json):CONTENTFUL_SPACE_ID}
    CONTENTFUL_SPACE_ENV: ${file(env/${self:provider.stage}.json):CONTENTFUL_SPACE_ENV}
    CONTENTFUL_MGMT_ACCESS_TOKEN: ${file(env/${self:provider.stage}.json):CONTENTFUL_MGMT_ACCESS_TOKEN}
    CORS_ACCESS_CONTROL_ALLOW_ORIGINS: ${file(env/${self:provider.stage}.json):CORS_ACCESS_CONTROL_ALLOW_ORIGINS}
package:
  patterns: ["node_modules", "graph.js", "graphAPI.js"]

functions:
  getGraph:
    handler: graphAPI.getGraph
    timeout: 500
    events:
      - http:
          path: /graph
          method: GET
          cors:
            origin: ${file(env/${self:provider.stage}.json):CORS_ACCESS_CONTROL_ALLOW_ORIGINS}
            headers:
              - Content-Type
              - Authorization
              - sentry-trace
            allowCredentials: false
          authorizer:
            type: cognito_user_pools
            authorizerId:
              Ref: MyApiGatewayAuthorizer
            scopes: ${file(env/${self:provider.stage}.json):awsApiGatewayOauthScopes}

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-domain-manager

resources:
  Resources:
    myLambdaRole:
      Type: "AWS::IAM::Role"
      Properties:
        Path: /
        RoleName: ${self:service}-role-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - ssm:GetParameter
                    - ssm:GetParameters
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:ssm"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "parameter/${self:provider.stage}/research-hub/*"
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:kms"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "${file(env/${self:provider.stage}.json):resourceKey}"

    MyApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: cognito-authorizer-uoapool
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - "Fn::Join":
              - ":"
              - - "arn:aws:cognito-idp"
                - Ref: "AWS::Region"
                - Ref: "AWS::AccountId"
                - "userpool/${file(env/${self:provider.stage}.json):cognitoUserPoolId}"
